
#=======================================
#  Field PIN_FLD_ACCOUNT_OBJ
#=======================================

POID PIN_FLD_ACCOUNT_OBJ {

	ID = 40;
}


#=======================================
#  Field PIN_FLD_BUFFER
#=======================================

BUF PIN_FLD_BUFFER {

	ID = 34;
}


#=======================================
#  Field PIN_FLD_CREATED_T
#=======================================

TIMESTAMP PIN_FLD_CREATED_T {

	ID = 19;
}


#=======================================
#  Field PIN_FLD_HEADER_NUM
#=======================================

INT PIN_FLD_HEADER_NUM {

	ID = 33;
}


#=======================================
#  Field PIN_FLD_HEADER_STR
#=======================================

STRING PIN_FLD_HEADER_STR {

	ID = 32;
}


#=======================================
#  Field PIN_FLD_MOD_T
#=======================================

TIMESTAMP PIN_FLD_MOD_T {

	ID = 20;
}


#=======================================
#  Field PIN_FLD_NAME
#=======================================

STRING PIN_FLD_NAME {

	ID = 17;
}


#=======================================
#  Field PIN_FLD_PARENT
#=======================================

POID PIN_FLD_PARENT {

	ID = 22;
}


#=======================================
#  Field PIN_FLD_POID
#=======================================

POID PIN_FLD_POID {

	ID = 16;
}


#=======================================
#  Field PIN_FLD_READ_ACCESS
#=======================================

STRING PIN_FLD_READ_ACCESS {

	ID = 1903;
}


#=======================================
#  Field PIN_FLD_WRITE_ACCESS
#=======================================

STRING PIN_FLD_WRITE_ACCESS {

	ID = 1904;
}


#=======================================
#  Field PIN_FLD_ARCHIVING_STATE
#=======================================

SUBSTRUCT PIN_FLD_ARCHIVING_STATE {

	ID = 1756;
}


#=======================================
#  Field PIN_FLD_ARCHIVE_PREPARE_T
#=======================================

TIMESTAMP PIN_FLD_ARCHIVE_PREPARE_T {

	ID = 1761;
}


#=======================================
#  Field PIN_FLD_ARCHIVE_ROWS_DELETED
#=======================================

INT PIN_FLD_ARCHIVE_ROWS_DELETED {

	ID = 1757;
}


#=======================================
#  Field PIN_FLD_ARCHIVE_ROWS_TO_BACKUP
#=======================================

INT PIN_FLD_ARCHIVE_ROWS_TO_BACKUP {

	ID = 1759;
}


#=======================================
#  Field PIN_FLD_ARCHIVE_ROWS_TO_PUSH
#=======================================

INT PIN_FLD_ARCHIVE_ROWS_TO_PUSH {

	ID = 1760;
}


#=======================================
#  Field PIN_FLD_ARCHIVING_ID
#=======================================

INT PIN_FLD_ARCHIVING_ID {

	ID = 1758;
}


#=======================================
#  Field PIN_FLD_STATUS
#=======================================

ENUM PIN_FLD_STATUS {

	ID = 145;
}


#=======================================
#  Field PIN_FLD_JOURNAL_INFO
#=======================================

ARRAY PIN_FLD_JOURNAL_INFO {

	ID = 1799;
}


#=======================================
#  Field PIN_FLD_EVENT_OBJ
#=======================================

POID PIN_FLD_EVENT_OBJ {

	ID = 42;
}


#=======================================
#  Field PIN_FLD_LAST_POSTED_T
#=======================================

TIMESTAMP PIN_FLD_LAST_POSTED_T {

	ID = 2407;
}


#=======================================
#  Field PIN_FLD_LEDGER_REPORT
#=======================================

SUBSTRUCT PIN_FLD_LEDGER_REPORT {

	ID = 193;
}


#=======================================
#  Field PIN_FLD_GL_SEGMENT
#=======================================

STRING PIN_FLD_GL_SEGMENT {

	ID = 517;
}


#=======================================
#  Field PIN_FLD_POSTED_T
#=======================================

TIMESTAMP PIN_FLD_POSTED_T {

	ID = 518;
}


#=======================================
#  Storable Class /data
#=======================================

STORABLE CLASS /data {

	SEQ_START = "1000";
	READ_ACCESS = "BrandLineage";
	WRITE_ACCESS = "BrandLineage";
	DESCR = "Generic data class to hold arbitrary information. Recommeded approach is to subtype this generic class to hold specific types of data. For example, define '/data/photo' to hold the image of a person. Note that when subtyping in Infranet, you do not need to add additional fields in the derived class.";
	IS_PARTITIONED = "0";

	#===================
	#  Fields 
	#===================

	POID PIN_FLD_ACCOUNT_OBJ {

		DESCR = "Link to account object for which this object was created.";
		ORDER = 0;
		CREATE = Required;
		MODIFY = Writeable;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

	BUF PIN_FLD_BUFFER {

		DESCR = "Container to hold the actual data.";
		ORDER = 0;
		CREATE = Optional;
		MODIFY = Writeable;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

	TIMESTAMP PIN_FLD_CREATED_T {

		ORDER = 0;
		CREATE = System;
		MODIFY = System;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

	INT PIN_FLD_HEADER_NUM {

		DESCR = "A generic user-definable header number field.";
		ORDER = 0;
		CREATE = Optional;
		MODIFY = Writeable;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

	STRING PIN_FLD_HEADER_STR {

		DESCR = "A generic user-definable header string field.";
		ORDER = 0;
		LENGTH = 255;
		CREATE = Optional;
		MODIFY = Writeable;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

	TIMESTAMP PIN_FLD_MOD_T {

		ORDER = 0;
		CREATE = System;
		MODIFY = System;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

	STRING PIN_FLD_NAME {

		DESCR = "Name of the data object instance.";
		ORDER = 0;
		LENGTH = 255;
		CREATE = Optional;
		MODIFY = Writeable;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

	POID PIN_FLD_PARENT {

		DESCR = "Link to an arbitrary object that owns this data object.";
		ORDER = 0;
		CREATE = Optional;
		MODIFY = Writeable;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

	POID PIN_FLD_POID {

		ORDER = 0;
		CREATE = System;
		MODIFY = System;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

	STRING PIN_FLD_READ_ACCESS {

		ORDER = 0;
		LENGTH = 1;
		CREATE = System;
		MODIFY = System;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

	STRING PIN_FLD_WRITE_ACCESS {

		ORDER = 0;
		LENGTH = 1;
		CREATE = System;
		MODIFY = System;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;
	}

}


#=======================================
#  Storable Class /data/archiving
#=======================================

STORABLE CLASS /data/archiving {

	READ_ACCESS = "Global";
	WRITE_ACCESS = "Self";
	DESCR = "data object for data archiving state information";
	IS_PARTITIONED = "0";

	#===================
	#  Fields 
	#===================

	SUBSTRUCT PIN_FLD_ARCHIVING_STATE {

		DESCR = "Substruct to store the current archiving session information";
		ORDER = 0;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;

		#===================
		#  Fields 
		#===================

		TIMESTAMP PIN_FLD_ARCHIVE_PREPARE_T {

			DESCR = "Time the current session's prepare operation was done.";
			ORDER = 0;
			CREATE = Required;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

		INT PIN_FLD_ARCHIVE_ROWS_DELETED {

			DESCR = "Tells whether any rows have been deleted from the database. Abort operation cannot be performed after row(s) deletion.";
			ORDER = 0;
			CREATE = Required;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

		INT PIN_FLD_ARCHIVE_ROWS_TO_BACKUP {

			DESCR = "Number of instances marked for backup by the prepare operation.";
			ORDER = 0;
			CREATE = Required;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

		INT PIN_FLD_ARCHIVE_ROWS_TO_PUSH {

			DESCR = "Number of instances marked for push by the prepare operation.";
			ORDER = 0;
			CREATE = Required;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

		INT PIN_FLD_ARCHIVING_ID {

			DESCR = "Archiving session id. It is unique for every archiving session";
			ORDER = 0;
			CREATE = Required;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

		ENUM PIN_FLD_STATUS {

			DESCR = "archiving state";
			ORDER = 0;
			CREATE = Required;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

	}

}


#=======================================
#  Storable Class /data/journal
#=======================================

STORABLE CLASS /data/journal {

	READ_ACCESS = "BrandLineage";
	WRITE_ACCESS = "BrandLineage";
	DESCR = "This object holds information about the last event that was proccessed during journal creation/updation.";
	IS_PARTITIONED = "0";

	#===================
	#  Fields 
	#===================

	ARRAY PIN_FLD_JOURNAL_INFO {

		DESCR = "Place holder for storing details of the last event that was journaled. ";
		ORDER = 0;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;

		#===================
		#  Fields 
		#===================

		POID PIN_FLD_EVENT_OBJ {

			DESCR = "This is the poid of the last event that was journaled from the HISTORIC partition. ";
			ORDER = 0;
			CREATE = Optional;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

		TIMESTAMP PIN_FLD_LAST_POSTED_T {

			DESCR = "The created_time of the last event that was proccessed during the journal creation/updation. ";
			ORDER = 0;
			CREATE = Required;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

	}

}


#=======================================
#  Storable Class /data/ledger_report
#=======================================

STORABLE CLASS /data/ledger_report {

	READ_ACCESS = "BrandLineage";
	WRITE_ACCESS = "BrandLineage";
	DESCR = "This object is created or updated for a given GL segment when the ledger is posted for that segment within the Portal system. The posting date is maintained in this object. The effective time of A/R transactions are checked against this date to prevent any backdating before this date. The posting is done in any of the following scenarios - 1) pin_ledger_report is invoked with the -post option in run_report mode, 2) pin_ledger_report is invoked with the -posted option in post_only mode and 3) pin_ledger_report is invoked in export mode. ";
	IS_PARTITIONED = "0";

	#===================
	#  Fields 
	#===================

	SUBSTRUCT PIN_FLD_LEDGER_REPORT {

		DESCR = "Place holder for storing the timestamp of the last official GL run for this GL segment.";
		ORDER = 0;
		AUDITABLE = 0;
		ENCRYPTABLE = 0;
		SERIALIZABLE = 0;

		#===================
		#  Fields 
		#===================

		STRING PIN_FLD_GL_SEGMENT {

			DESCR = "GL segment this report was posted for.";
			ORDER = 0;
			LENGTH = 255;
			CREATE = Optional;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

		TIMESTAMP PIN_FLD_LAST_POSTED_T {

			DESCR = "the last time when the official ledger report was run for this GL segment. Used to let the user to un-post. ";
			ORDER = 0;
			CREATE = Optional;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

		TIMESTAMP PIN_FLD_POSTED_T {

			DESCR = "Time when the official ledger report was run for this GL segment. Used to control the transaction backdating. (can't post a transaction before this date)";
			ORDER = 0;
			CREATE = Optional;
			MODIFY = Writeable;
			AUDITABLE = 0;
			ENCRYPTABLE = 0;
			SERIALIZABLE = 0;
		}

	}

}


#=======================================
#  Storable Class /data/price_list_changed
#=======================================

STORABLE CLASS /data/price_list_changed {

	READ_ACCESS = "Global";
	WRITE_ACCESS = "Global";
	DESCR = "Data object that get updated everytime price list objects are changed.";
	IS_PARTITIONED = "0";
}


#=======================================
#  Storable Class /data/sequence
#=======================================

STORABLE CLASS /data/sequence {

	READ_ACCESS = "Global";
	WRITE_ACCESS = "Global";
	DESCR = "A singleton configuration object of this class is used to maintain various sequence number generators used by the system to stamp bills, items etc. with unique and usually monotonically increasing identifiers. This is also used to generate transaction ids for correlating information with external system like payment engines. A predefined instance is loaded from init_objects.source during installation. It is recommended that you configure the various sequence number formats only once. You may define additional sequences for your use by using element ids greater than 1000000 or  you may define other sequence objects with poid id.";
	IS_PARTITIONED = "0";
}


#=======================================
#  Storable Class /data/sequence_lock
#=======================================

STORABLE CLASS /data/sequence_lock {

	READ_ACCESS = "Self";
	WRITE_ACCESS = "Self";
	DESCR = "Reserved for internal use only.  Each object for this storable-class correlates to the database mechanism for allocating new poid_id0 values.  It is specifically used to support retrieving a range of poid_id0 values; it uses the object with the 'name' of the database sequence to hold a lock on the record when making alterations to the sequence.  Consequently, there should be one object for each poid_id0-generating sequence in the database which supports range retrieval.";
	IS_PARTITIONED = "0";
}


#=======================================
#  Storable Class /data
#=======================================

STORABLE CLASS /data IMPLEMENTATION ORACLE7 {

	SQL_TABLE = "data_t";
	SQL_STORAGE = "tablespace pin00 storage (initial 200k next 200k maxextents unlimited pctincrease 0 ) ";

	#===================
	#  Fields 
	#===================

	POID PIN_FLD_ACCOUNT_OBJ {

		SQL_COLUMN = "account_obj";
	}

	BUF PIN_FLD_BUFFER {

		SQL_TABLE = "data_buffer_buf";
		SQL_COLUMN = "buffer";
		SQL_STORAGE = "tablespace pin00 storage (initial 500k next 500k maxextents unlimited pctincrease 0 ) ";
	}

	TIMESTAMP PIN_FLD_CREATED_T {

		SQL_COLUMN = "created_t";
	}

	INT PIN_FLD_HEADER_NUM {

		SQL_COLUMN = "header_num";
	}

	STRING PIN_FLD_HEADER_STR {

		SQL_COLUMN = "header_str";
	}

	TIMESTAMP PIN_FLD_MOD_T {

		SQL_COLUMN = "mod_t";
	}

	STRING PIN_FLD_NAME {

		SQL_COLUMN = "name";
	}

	POID PIN_FLD_PARENT {

		SQL_COLUMN = "parent";
	}

	POID PIN_FLD_POID {

		SQL_COLUMN = "poid";
	}

	STRING PIN_FLD_READ_ACCESS {

		SQL_COLUMN = "read_access";
	}

	STRING PIN_FLD_WRITE_ACCESS {

		SQL_COLUMN = "write_access";
	}

}


#=======================================
#  Storable Class /data/archiving
#=======================================

STORABLE CLASS /data/archiving IMPLEMENTATION ORACLE7 {


	#===================
	#  Fields 
	#===================

	SUBSTRUCT PIN_FLD_ARCHIVING_STATE {

		SQL_TABLE = "data_archiving_t";
		SQL_STORAGE = "tablespace pin00 storage (initial 100k next 100k maxextents unlimited pctincrease 0 ) ";

		#===================
		#  Fields 
		#===================

		TIMESTAMP PIN_FLD_ARCHIVE_PREPARE_T {

			SQL_COLUMN = "prepare_t";
		}

		INT PIN_FLD_ARCHIVE_ROWS_DELETED {

			SQL_COLUMN = "rows_deleted";
		}

		INT PIN_FLD_ARCHIVE_ROWS_TO_BACKUP {

			SQL_COLUMN = "rows_to_backup";
		}

		INT PIN_FLD_ARCHIVE_ROWS_TO_PUSH {

			SQL_COLUMN = "rows_to_push";
		}

		INT PIN_FLD_ARCHIVING_ID {

			SQL_COLUMN = "archiving_id";
		}

		ENUM PIN_FLD_STATUS {

			SQL_COLUMN = "state";
		}

	}

}


#=======================================
#  Storable Class /data/journal
#=======================================

STORABLE CLASS /data/journal IMPLEMENTATION ORACLE7 {


	#===================
	#  Fields 
	#===================

	ARRAY PIN_FLD_JOURNAL_INFO {

		SQL_TABLE = "data_journal_t";

		#===================
		#  Fields 
		#===================

		POID PIN_FLD_EVENT_OBJ {

			SQL_COLUMN = "event_obj";
		}

		TIMESTAMP PIN_FLD_LAST_POSTED_T {

			SQL_COLUMN = "last_posted_t";
		}

	}

}


#=======================================
#  Storable Class /data/ledger_report
#=======================================

STORABLE CLASS /data/ledger_report IMPLEMENTATION ORACLE7 {


	#===================
	#  Fields 
	#===================

	SUBSTRUCT PIN_FLD_LEDGER_REPORT {

		SQL_TABLE = "data_ledger_report_t";
		SQL_STORAGE = "tablespace pin00 storage (initial 200k next 200k maxextents unlimited pctincrease 0 ) ";

		#===================
		#  Fields 
		#===================

		STRING PIN_FLD_GL_SEGMENT {

			SQL_COLUMN = "gl_segment";
		}

		TIMESTAMP PIN_FLD_LAST_POSTED_T {

			SQL_COLUMN = "last_posted_t";
		}

		TIMESTAMP PIN_FLD_POSTED_T {

			SQL_COLUMN = "posted_t";
		}

	}

}


#=======================================
#  Storable Class /data/price_list_changed
#=======================================

STORABLE CLASS /data/price_list_changed IMPLEMENTATION ORACLE7 {

}


#=======================================
#  Storable Class /data/sequence
#=======================================

STORABLE CLASS /data/sequence IMPLEMENTATION ORACLE7 {

}


#=======================================
#  Storable Class /data/sequence_lock
#=======================================

STORABLE CLASS /data/sequence_lock IMPLEMENTATION ORACLE7 {

}

