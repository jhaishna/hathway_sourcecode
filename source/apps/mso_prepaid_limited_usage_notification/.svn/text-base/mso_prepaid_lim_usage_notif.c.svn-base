/*******************************************************************
 *
 *    Copyright (c) 1999-2007 Oracle. All rights reserved.
 *
 *    This material is the confidential property of Oracle Corporation
 *    or its licensors and may be used, reproduced, stored or transmitted
 *    only in accordance with a valid Oracle license or sublicense agreement.
 *    ====================================================================
 *    This application is created to send payment reminder to customer
 *    Author: Vilva S
 *    Date: 28-Dec-2013
 *    Version: 1.0 
 *
 *******************************************************************/

#ifndef lint
static  char    Sccs_id[] = "@(#)%Portal Version: pin_mta_test.c:CUPmod7.3PatchInt:1:2007-Feb-07 06:51:33 %";
#endif

#include <stdio.h>

#include "pcm.h"
#include "pin_errs.h"
#include "pinlog.h"
#include "pin_mta.h"
#include "pin_flds.h"
#include "mso_ops_flds.h"
#include "mso_ntf.h"
#include "ops/bal.h"

#define  NEW_RECORD     0  
#define  SUCCESS_RECORD     1
#define  ERROR_RECORD     2
#define  RETRY         2

#define NOTIFICATION 2

/*******************************************************************
 * Configuration of application
 * Called prior MTA_CONFIG policy opcode
 *******************************************************************/
PIN_EXPORT void 
pin_mta_config(
        pin_flist_t        *param_flistp,
        pin_flist_t        *app_flistp,
        pin_errbuf_t    *ebufp)
{
    int32           rec_id = 0;
    pin_cookie_t    cookie = 0;
    pin_cookie_t    prev_cookie = 0;
    pin_flist_t     *flistp = 0;
    char            *option = 0;
    char            *object_type   = NULL;
    char            *obj_type   = NULL;
    int32           mta_flags = 0;
    int32           err = 0;
    int32           i = 0;
    void            *vp = 0;
    int             retry = RETRY;
    int32          i_param_count = 0;
    char            delimiter = '/';
    char msg[20];

    if (PIN_ERR_IS_ERR(ebufp)) {
        return;
    }
    PIN_ERRBUF_CLEAR (ebufp);

    PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_config parameters flist", 
                       param_flistp);
    PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_config application info flist", 
                           app_flistp);
    
	vp = PIN_FLIST_FLD_GET (app_flistp, PIN_FLD_FLAGS, 0,ebufp);
	if(vp)
		mta_flags = *((int32*)vp);

        /***********************************************************
         * The new flag MTA_FLAG_VERSION_NEW has been introduced to
         * differentiate between new mta & old mta applications as
         * only new applications have the ability to drop PIN_FLD_PARAMS
         * for valid parameters . It is only for new apps that
         * checking err_params_cnt is valid, otherwise for old applications
         * this check without a distincion for new applications would hamper
         * normal functioning.
         ***********************************************************/
    mta_flags = mta_flags | MTA_FLAG_VERSION_NEW ;
    PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_config application info flist", 
                       app_flistp);

    if (PIN_ERR_IS_ERR(ebufp)) {
        PIN_ERR_LOG_EBUF(PIN_ERR_LEVEL_ERROR,
                         "pin_mta_config error", ebufp);
    }
    return;
}

/*******************************************************************
 * Usage information for the specific app.
 * Called prior MTA_USAGE policy opcode
 *******************************************************************/
PIN_EXPORT void
pin_mta_usage(
        char    *prog)
{

    pin_errbuf_t    ebuf;
    pin_flist_t        *ext_flistp = NULL;
    char            *usage_str = NULL;

    char            *format = "\nUsage:     %s  \n\n";
            
    PIN_ERRBUF_CLEAR (&ebuf);
    
    usage_str = (char*)pin_malloc( strlen(format) + strlen(prog) + 1 );

    if (usage_str == NULL) {
        PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_ERROR,"No Memory error");
        return;
    }

    sprintf(usage_str, format ,prog);

    ext_flistp = pin_mta_global_flist_node_get_no_lock (PIN_FLD_EXTENDED_INFO,
                               &ebuf);

    PIN_FLIST_FLD_SET (ext_flistp, PIN_FLD_DESCR, usage_str, &ebuf)

    if (PIN_ERR_IS_ERR(&ebuf)) {
        PIN_ERR_LOG_EBUF(PIN_ERR_LEVEL_ERROR,
                         "pin_mta_usage error", &ebuf);
    }
    if (usage_str) {
        pin_free(usage_str);
    }
    return;
}

/*******************************************************************
 * Usage information for the specific app.
 * Called after MTA_USAGE policy opcode
 * Information passed from customization layer
 * can be processed and displayed here
 *******************************************************************/
PIN_EXPORT void 
pin_mta_post_usage(
        pin_flist_t        *param_flistp,
        pin_flist_t        *app_flistp,
        pin_errbuf_t    *ebufp)
{
    pin_flist_t    *ext_flistp = NULL;
    void        *vp = 0;

    if (PIN_ERR_IS_ERR(ebufp)) {
        return;
    }
    PIN_ERRBUF_CLEAR (ebufp);

    PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_post_usage parameters flist", 
                       param_flistp);
    PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_post_usage application info flist", 
                       app_flistp);

    ext_flistp =
        pin_mta_global_flist_node_get_no_lock (PIN_FLD_EXTENDED_INFO,
                                               ebufp);

    vp = PIN_FLIST_FLD_GET (ext_flistp, PIN_FLD_DESCR, 1, ebufp);

    if(vp) {
        printf("%s",(char*) vp);
    }

    if (PIN_ERR_IS_ERR(ebufp)) {
        PIN_ERR_LOG_EBUF(PIN_ERR_LEVEL_ERROR,
                         "pin_mta_post_usage error", ebufp);
    }
    return;
}

/*******************************************************************
 * Application defined search criteria.
 * Called prior MTA_INIT_SEARCH policy opcode
 *******************************************************************/
PIN_EXPORT void
pin_mta_init_search(
        pin_flist_t        *app_flistp,
        pin_flist_t        **s_flistpp,
        pin_errbuf_t    *ebufp)
{

    	pin_flist_t	*s_flistp    = NULL;
    	pin_flist_t     *tmp_flistp = NULL;
    	pin_flist_t     *tmp1_flistp = NULL;
    	pin_flist_t     *extraRes_flistp = NULL;
    	char            *template = "select X from /purchased_product 1, /account 2, /product 3 where 2.F1 = 1.F2 and 1.F3 = V3 and 1.F4 = 3.F5 and ((3.F6 >= V6 and 3.F7 <= V7) or (3.F8 >= V8 and 3.F9 <= V9) or (3.F10 >= V10 and 3.F11 <= V11) or (3.F12 >= V12 and 3.F13 <= V13)) ";
    	char            obj_type[100];
    	char            *object_type = NULL;
	char            *t1 = NULL;
	char		*bill_info_id = "BB";
    int32           s_flags = 256;
    int32           active_status = 1;
    poid_t          *s_pdp = NULL;
    poid_t          *i_pdp = NULL;
	poid_t          *binfo_pdp = NULL;
    	int64           id = -1;
    	int64           db = 0;
    	void            *vp = NULL;
	time_t		now_t = 0;
	time_t		start_t = (time_t)0;
	time_t		end_t = (time_t)0;
	pin_decimal_t	*sme_pri_start = pbo_decimal_from_str("1000.0", ebufp);
	pin_decimal_t	*sme_pri_end = pbo_decimal_from_str("1100.0", ebufp);
	pin_decimal_t	*ret_pri_start = pbo_decimal_from_str("2000.0", ebufp);
	pin_decimal_t	*ret_pri_end = pbo_decimal_from_str("2100.0", ebufp);
	pin_decimal_t	*cyb_pri_start = pbo_decimal_from_str("3000.0", ebufp);
	pin_decimal_t	*cyb_pri_end = pbo_decimal_from_str("3100.0", ebufp);
	pin_decimal_t	*cor_pri_start = pbo_decimal_from_str("4000.0", ebufp);
	pin_decimal_t	*cor_pri_end = pbo_decimal_from_str("4100.0", ebufp);


    	if (PIN_ERR_IS_ERR(ebufp)) 
	{
        	return;
    	}
    	PIN_ERRBUF_CLEAR (ebufp);
	now_t = pin_virtual_time((time_t *)NULL);
    	*s_flistpp = 0;

    	PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_init_search application info flist", 
                       app_flistp);
	
	PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG,"Reading pin_conf for collection reminder");
	
   	s_flistp = PIN_FLIST_CREATE(ebufp);
	PIN_ERR_LOG_MSG(3, "After poid create");

    /***********************************************************
     * Simple search flist
     ***********************************************************
0 PIN_FLD_POID           POID [0] 0.0.0.1 /search/pin -1 0
0 PIN_FLD_FLAGS           INT [0] 0
0 PIN_FLD_TEMPLATE        STR [0] "select X from /account 1, /purchased_product 2, /product 3 
		where 1.F1 = 2.F2 and 2.F3 = V3 and 2.F4 = 3.F5 and ((3.F6 >= V6 and 3.F7 <= V7) 
		or (3.F8 >= V8 and 3.F9 <= V9) or (3.F10 >= V10 and 3.F11 <= V11) 
		or (3.F12 >= V12 and 3.F13 <= V13)) "
0 PIN_FLD_ARGS          ARRAY [1] allocated 20, used 1
0 PIN_FLD_POID		POID [0] NULL
0 PIN_FLD_ARGS          ARRAY [2] allocated 20, used 1
1     PIN_FLD_ACCOUNT_OBJ    POID [0] NULL
0 PIN_FLD_ARGS          ARRAY [3] allocated 20, used 1
1     PIN_FLD_STATUS    INT [0] 1
0 PIN_FLD_ARGS          ARRAY [4] allocated 20, used 1
1     PIN_FLD_PRODUCT_OBJ    POID [0] NULL
0 PIN_FLD_ARGS          ARRAY [5] allocated 20, used 1
1     PIN_FLD_POID    POID [0] NULL
0 PIN_FLD_ARGS          ARRAY [6] allocated 20, used 1
1     PIN_FLD_PRIORITY    DECIMAL [0] 1000.0
0 PIN_FLD_ARGS          ARRAY [7] allocated 20, used 1
1     PIN_FLD_PRIORITY    DECIMAL [0] 1100.0
0 PIN_FLD_ARGS          ARRAY [8] allocated 20, used 1
1     PIN_FLD_PRIORITY    DECIMAL [0] 2000.0
0 PIN_FLD_ARGS          ARRAY [9] allocated 20, used 1
1     PIN_FLD_PRIORITY    DECIMAL [0] 2100.0
0 PIN_FLD_ARGS          ARRAY [10] allocated 20, used 1
1     PIN_FLD_PRIORITY    DECIMAL [0] 3000.0
0 PIN_FLD_ARGS          ARRAY [11] allocated 20, used 1
1     PIN_FLD_PRIORITY    DECIMAL [0] 3100.0
0 PIN_FLD_ARGS          ARRAY [12] allocated 20, used 1
1     PIN_FLD_PRIORITY    DECIMAL [0] 4000.0
0 PIN_FLD_ARGS          ARRAY [13] allocated 20, used 1
1     PIN_FLD_PRIORITY    DECIMAL [0] 4100.0
0 PIN_FLD_RESULTS       ARRAY [0] allocated 20, used 5
1     PIN_FLD_POID   POID [0] NULL poid pointer
    ***********************************************************/
		
		PIN_ERR_LOG_MSG(3, "Before poid");
    	vp = PIN_FLIST_FLD_GET (app_flistp, PIN_FLD_POID_VAL, 0, ebufp);
    	if(vp)
        	db = PIN_POID_GET_DB ((poid_t*)vp);

    	s_pdp = PIN_POID_CREATE(db, "/search", id, ebufp);
    	PIN_FLIST_FLD_PUT(s_flistp, PIN_FLD_POID, (void *)s_pdp, ebufp);
		PIN_ERR_LOG_MSG(3, "Before flags");
    	PIN_FLIST_FLD_SET (s_flistp, PIN_FLD_FLAGS, &s_flags, ebufp);
    	PIN_ERR_LOG_MSG(3, "after flags");
		/***********************************************************
     	* Search Start Time & End Time
     	***********************************************************/
    	tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 1, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_POID, NULL, ebufp);
		PIN_ERR_LOG_MSG(3, "after 1");
    	tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 2, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_ACCOUNT_OBJ, NULL, ebufp);
		PIN_ERR_LOG_MSG(3, "after 2");
    	tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 3, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_STATUS, &active_status, ebufp);
		PIN_ERR_LOG_MSG(3, "after status");
    	tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 4, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_PRODUCT_OBJ, NULL, ebufp);
		PIN_ERR_LOG_MSG(3, "after 4");
    	tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 5, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_POID, NULL, ebufp);
		PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG, "Before priority");
		tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 6, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_PRIORITY, sme_pri_start, ebufp);
		tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 7, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_PRIORITY, sme_pri_end, ebufp);
		tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 8, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_PRIORITY, ret_pri_start, ebufp);
		tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 9, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_PRIORITY, ret_pri_end, ebufp);
		tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 10, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_PRIORITY, cyb_pri_start, ebufp);
		tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 11, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_PRIORITY, cyb_pri_end, ebufp);
		tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 12, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_PRIORITY, cor_pri_start, ebufp);
		tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_ARGS, 13, ebufp);
    	PIN_FLIST_FLD_SET (tmp_flistp, PIN_FLD_PRIORITY, cor_pri_end, ebufp);


    	PIN_FLIST_FLD_SET (s_flistp, PIN_FLD_TEMPLATE, template, ebufp);
		PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG, "After setting template");

    	/***********************************************************
     	* Search results
     	***********************************************************/
   	tmp_flistp = PIN_FLIST_ELEM_ADD (s_flistp, PIN_FLD_RESULTS,0, ebufp);
	PIN_FLIST_FLD_SET(tmp_flistp, PIN_FLD_ACCOUNT_OBJ, NULL, ebufp);
	PIN_FLIST_FLD_SET(tmp_flistp, PIN_FLD_SERVICE_OBJ, NULL, ebufp);

	PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_init_search search flist", s_flistp);
    	if (PIN_ERR_IS_ERR(ebufp)) 
    	{
        	PIN_ERR_LOG_EBUF(PIN_ERR_LEVEL_ERROR, "pin_mta_init_search error", ebufp);
        	PIN_FLIST_DESTROY_EX (&s_flistp,0);
    	}
    	else
    	{
        	*s_flistpp = s_flistp;
        	PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_init_search search flist", s_flistp);
    	}

    return;
}


/*******************************************************************
 * Search results are modified to consider extra outouts into worker opcode
 * Called after MTA_TUNE policy opcode
 *******************************************************************/
PIN_EXPORT void 
pin_mta_post_tune(
		pin_flist_t		*app_flistp,
		pin_flist_t		*srch_res_flistp,
		pin_errbuf_t	*ebufp)
{
	pin_flist_t             *rest_flistp=NULL;
	pin_flist_t             *multirest_flistp=NULL;
	pin_cookie_t		cookie = NULL;
	int			elem_id = 0;
	if (PIN_ERR_IS_ERR(ebufp)) {
		return;
	}
	PIN_ERRBUF_CLEAR (ebufp);

	PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_post_tune application info flist", 
					   app_flistp);
	PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_post_tune search results flist", 
					   srch_res_flistp);
        PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_post_tune search results output flist", srch_res_flistp);

	return;
}

/*******************************************************************
 * Main application opcode is called here
 *******************************************************************/
PIN_EXPORT void
pin_mta_worker_opcode(
                pcm_context_t   *ctxp,
                pin_flist_t     *srch_res_flistp,
                pin_flist_t             *op_in_flistp,
                pin_flist_t             **op_out_flistpp,
                pin_flist_t             *ti_flistp,
                pin_errbuf_t    *ebufp)
{
/*	pin_flist_t             *in_flistp=NULL;
    	pin_flist_t        *app_flistp = NULL;
	pin_flist_t        *r_flistp = NULL;
	pin_flist_t        *rs_flistp = NULL;
	pin_flist_t        *extrars_flistp = NULL;
    	char            *name = NULL;
    	char            obj_type[50];
    	int64            id = -1;
    	int64            db = 1;
    	void            *vp =NULL;
    	poid_t          *n_pdp = NULL;
	poid_t          *binfo_pdp = NULL;
	poid_t          *serv_pdp = NULL;
	poid_t          *s_pdp = NULL;
    	pin_buf_t       *nota_buf     = NULL;
	int32           s_flags = 512;
	int32		notification = NOTIFICATION; */


	char	*template = "select X from /mso_purchased_plan where F1 = V1 and F2 = V2 ";

	pin_flist_t	*mso_in_flistp = NULL;
	pin_flist_t	*mso_out_flistp = NULL;
	pin_flist_t	*args_flistp = NULL;
	pin_flist_t	*result_flistp = NULL;
	pin_flist_t	*cl_in_flistp = NULL;
	pin_flist_t	*cl_out_flistp = NULL;
	pin_flist_t	*read_plan_iflistp = NULL;
	pin_flist_t	*read_plan_oflistp = NULL;
	pin_flist_t	*cities_flistp = NULL;
	pin_flist_t	*cl_flistp = NULL;
	pin_flist_t	*bal_in_flistp = NULL;
	pin_flist_t	*bal_out_flistp = NULL;
	pin_flist_t	*balances_flistp = NULL;
	pin_flist_t	*sub_bal_flistp = NULL;
	pin_flist_t	*notif_iflistp = NULL;
	pin_flist_t	*notif_oflistp = NULL;
	char	*cl_template = "select X from /mso_cfg_credit_limit where F1 = V1 ";
	int32	srch_flag = 0;
	int32	bal_flag = 16;
	int32	status_active = 2;
	int64	db = 1;
	poid_t	*srch_pdp = NULL;
	poid_t	*acc_pdp = NULL;
	poid_t	*svc_pdp = NULL;
	char	*base_plan_descr = "base plan";
	char	*descr = NULL;
	char	*plan_name = NULL;
	char	msg[250] = "";
	int32	elemid = 0;
	pin_cookie_t	cookie = NULL;
	int32	free_mb = 1100010;
	pin_decimal_t	*credit_floor = NULL;
	pin_decimal_t	*credit_limit = NULL;
	pin_decimal_t	*cf_temp = NULL;
	pin_decimal_t	*cl_temp = NULL;
	pin_decimal_t	*mb_consumed = pbo_decimal_from_str("0.0", ebufp);
	pin_decimal_t	*curr_bal = NULL;
	pin_decimal_t	*res_bal = NULL;
	pin_decimal_t	*quota = NULL;
	time_t			start_t = pin_virtual_time((time_t *)NULL);
	time_t			end_t = pin_virtual_time((time_t *)NULL) + 1;
	int32			notif_flag = NTF_BB_PREPAID_LIM_USAGE;

	PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_worker_opcode search flist", srch_res_flistp);
	PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_worker_opcode input flist", op_in_flistp);

	acc_pdp = PIN_FLIST_FLD_GET(srch_res_flistp, PIN_FLD_ACCOUNT_OBJ, 0, ebufp);
	svc_pdp = PIN_FLIST_FLD_GET(srch_res_flistp, PIN_FLD_SERVICE_OBJ, 0, ebufp);

	srch_pdp = PIN_POID_CREATE(db, "/search", -1, ebufp);
	mso_in_flistp = PIN_FLIST_CREATE(ebufp);
	PIN_FLIST_FLD_SET(mso_in_flistp, PIN_FLD_POID, srch_pdp, ebufp);
	PIN_FLIST_FLD_SET(mso_in_flistp, PIN_FLD_FLAGS, &srch_flag, ebufp);
	PIN_FLIST_FLD_SET(mso_in_flistp, PIN_FLD_TEMPLATE, template, ebufp);
	args_flistp = PIN_FLIST_ELEM_ADD(mso_in_flistp, PIN_FLD_ARGS, 1, ebufp);
	PIN_FLIST_FLD_SET(args_flistp, PIN_FLD_ACCOUNT_OBJ, acc_pdp, ebufp);
	args_flistp = PIN_FLIST_ELEM_ADD(mso_in_flistp, PIN_FLD_ARGS, 2, ebufp);
	PIN_FLIST_FLD_SET(args_flistp, PIN_FLD_STATUS, &status_active, ebufp);
	result_flistp = PIN_FLIST_ELEM_ADD(mso_in_flistp, PIN_FLD_RESULTS, 0, ebufp);
	PIN_FLIST_FLD_SET(result_flistp, PIN_FLD_PLAN_OBJ, NULL, ebufp);
	

	PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG,
            "MSO_PURCHASED_PLAN search input flist", mso_in_flistp);
    PCM_OP(ctxp, PCM_OP_SEARCH, 0, mso_in_flistp, &mso_out_flistp, ebufp);
    PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG,
            "MSO_PURCHASED_PLAN  search output flist", mso_out_flistp);

	while((result_flistp = PIN_FLIST_ELEM_GET_NEXT(mso_out_flistp, PIN_FLD_RESULTS, &elemid, 1, 
			&cookie, ebufp)) != (pin_flist_t *)NULL) {

			// get plan name to fetch the credit limit.
		read_plan_iflistp = PIN_FLIST_CREATE(ebufp);
		PIN_FLIST_FLD_COPY(result_flistp,PIN_FLD_PLAN_OBJ, read_plan_iflistp, PIN_FLD_POID, ebufp);
		PIN_FLIST_FLD_SET(read_plan_iflistp, PIN_FLD_NAME, NULL, ebufp);

		PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG,
            "PLAN read flds input flist", read_plan_iflistp);
		PCM_OP(ctxp, PCM_OP_READ_FLDS, 0, read_plan_iflistp, &read_plan_oflistp, ebufp);
		PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG,
            "PLAN read flds output flist", read_plan_oflistp);

		plan_name = PIN_FLIST_FLD_GET(read_plan_oflistp, PIN_FLD_NAME, 0, ebufp);

		cl_in_flistp = PIN_FLIST_CREATE(ebufp);
		PIN_FLIST_FLD_SET(cl_in_flistp, PIN_FLD_POID, srch_pdp, ebufp);
		PIN_FLIST_FLD_SET(cl_in_flistp, PIN_FLD_FLAGS, &srch_flag, ebufp);
		PIN_FLIST_FLD_SET(cl_in_flistp, PIN_FLD_TEMPLATE, cl_template, ebufp);
		args_flistp = PIN_FLIST_ELEM_ADD(cl_in_flistp, PIN_FLD_ARGS, 1, ebufp);
		PIN_FLIST_FLD_COPY(read_plan_oflistp, PIN_FLD_NAME, args_flistp, MSO_FLD_PLAN_NAME, ebufp);
		result_flistp = PIN_FLIST_ELEM_ADD(cl_in_flistp, PIN_FLD_RESULTS, 0, ebufp);

		PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG,
            "Credit limit search input flist", cl_in_flistp);
		PCM_OP(ctxp, PCM_OP_SEARCH, 0, cl_in_flistp, &cl_out_flistp, ebufp);
		PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG,
            "Credit limit search output flist", cl_out_flistp);

		result_flistp = PIN_FLIST_ELEM_GET(cl_out_flistp, PIN_FLD_RESULTS, 0, 1, ebufp);
		if(result_flistp != NULL) {
			cities_flistp = PIN_FLIST_ELEM_GET(result_flistp, MSO_FLD_CITIES, 0, 1, ebufp);
			if(cities_flistp == NULL) {
				PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG, "No cities flist found!!");
			}
			PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG,"CITIES flist", cities_flistp);
			cl_flistp = PIN_FLIST_ELEM_GET(cities_flistp, MSO_FLD_CREDIT_PROFILE, free_mb, 1, ebufp);
			if(cl_flistp != NULL) {
				PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG,"MSO_FLD_CREDIT_PROFILE flist", cl_flistp);
				cf_temp = PIN_FLIST_FLD_GET(cl_flistp, PIN_FLD_CREDIT_FLOOR, 0, ebufp);
				cl_temp = PIN_FLIST_FLD_GET(cl_flistp, PIN_FLD_CREDIT_LIMIT, 0, ebufp);
				if(pbo_decimal_is_null(credit_floor, ebufp)&& pbo_decimal_is_null(credit_limit, ebufp)) {
					credit_floor = pbo_decimal_copy(cf_temp, ebufp);
					credit_limit = pbo_decimal_copy(cl_temp, ebufp);
				} else {
					credit_floor = pbo_decimal_add(credit_floor,cf_temp, ebufp);
					credit_limit = pbo_decimal_add(credit_limit,cl_temp, ebufp);
				}
			} else {
				PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG,"No Free MB configured for this plan!!");
			}
		}
		PIN_FLIST_DESTROY_EX(&read_plan_iflistp, NULL);
		PIN_FLIST_DESTROY_EX(&read_plan_oflistp, NULL);
	}	

	sprintf(msg, "Credit limit is %s",pbo_decimal_to_str(credit_limit, ebufp));
	PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG,msg);
	sprintf(msg, "Credit floor is %s",pbo_decimal_to_str(credit_floor, ebufp));
	PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG,msg);

	if(pbo_decimal_is_null(credit_limit, ebufp) || pbo_decimal_is_null(credit_floor, ebufp)) {
		PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG, "Credit Limit is null. So, not checking the balance for this account. Exiting..");
		return;
	}

	/* get the balance for additional MB */
	bal_in_flistp = PIN_FLIST_CREATE(ebufp);
	PIN_FLIST_FLD_SET(bal_in_flistp, PIN_FLD_POID, acc_pdp, ebufp);
	PIN_FLIST_ELEM_SET(bal_in_flistp, NULL, PIN_FLD_BALANCES, PIN_ELEMID_ANY, ebufp);
	//balances_flistp = PIN_FLIST_ELEM_ADD(bal_in_flistp, PIN_FLD_BALANCES, PIN_ELEMID_ANY, ebufp);
	//PIN_FLIST_FLD_SET(balances_flistp, PIN_FLD_CURRENT_BAL, NULL, ebufp);
	//PIN_FLIST_FLD_SET(balances_flistp, PIN_FLD_RESERVED_AMOUNT, NULL, ebufp);
	PIN_FLIST_FLD_SET(bal_in_flistp, PIN_FLD_END_T, &end_t, ebufp);
	PIN_FLIST_FLD_SET(bal_in_flistp, PIN_FLD_START_T, &start_t, ebufp);
	PIN_FLIST_FLD_SET(bal_in_flistp, PIN_FLD_SERVICE_OBJ, svc_pdp, ebufp);
	PIN_FLIST_FLD_SET(bal_in_flistp, PIN_FLD_FLAGS, &bal_flag, ebufp);

	PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG,
            "GET_BALANCES input flist", bal_in_flistp);
	PCM_OP(ctxp, PCM_OP_BAL_GET_BALANCES, 0, bal_in_flistp, &bal_out_flistp, ebufp);
	PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG,
            "GET_BALANCES output flist", bal_out_flistp);

	balances_flistp = PIN_FLIST_ELEM_GET(bal_out_flistp, PIN_FLD_BALANCES, free_mb, 1, ebufp);
	if(balances_flistp != NULL) {
		//sub_bal_flistp = PIN_FLIST_ELEM_GET(balances_flistp, PIN_FLD_SUB_BALANCES, 0, 1, ebufp);
		curr_bal = PIN_FLIST_FLD_GET(balances_flistp, PIN_FLD_CURRENT_BAL, 1, ebufp);
		res_bal = PIN_FLIST_FLD_GET(balances_flistp, PIN_FLD_RESERVED_AMOUNT, 1, ebufp);
		if(!pbo_decimal_is_null(curr_bal, ebufp)) {
			mb_consumed = pbo_decimal_add(mb_consumed, curr_bal, ebufp);
		}
		if(!pbo_decimal_is_null(res_bal, ebufp)) {
			mb_consumed = pbo_decimal_add(mb_consumed, res_bal, ebufp);
		}
	}

	quota = pbo_decimal_subtract(credit_limit, credit_floor, ebufp);

	sprintf(msg, "Quota is %s",pbo_decimal_to_str(quota, ebufp));
	PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG,msg);

	sprintf(msg, "Remaining in MB is %s",pbo_decimal_to_str(mb_consumed, ebufp));
	PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG,msg);

	mb_consumed = pbo_decimal_add(quota, mb_consumed, ebufp);
	sprintf(msg, "Usage in MB is %s",pbo_decimal_to_str(mb_consumed, ebufp));
	PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG,msg);

	PIN_FLIST_DESTROY_EX(&bal_in_flistp, NULL);
	PIN_FLIST_DESTROY_EX(&bal_out_flistp, NULL);

	//Preparing input and Calling Notfication API
    notif_iflistp = PIN_FLIST_CREATE(ebufp);
    PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG, "after PIN_FLIST_CREATE");
    PIN_FLIST_FLD_SET(notif_iflistp, PIN_FLD_SERVICE_OBJ, svc_pdp, ebufp);
    PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG, "after PIN_FLD_SERVICE_OBJ");
    PIN_FLIST_FLD_SET( notif_iflistp, PIN_FLD_POID, acc_pdp, ebufp);
    PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG, "after PIN_FLD_ACCOUNT_OBJ");
    PIN_FLIST_FLD_SET(notif_iflistp, PIN_FLD_FLAGS, &notif_flag, ebufp);
    PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG, "after PIN_FLD_FLAGS");
	PIN_FLIST_FLD_SET(notif_iflistp, PIN_FLD_TOTAL_VALUE, quota, ebufp);
    PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG, "after PIN_FLD_TOTAL_VALUE");
	PIN_FLIST_FLD_SET(notif_iflistp, PIN_FLD_USED_QUANTITY, mb_consumed, ebufp);
    PIN_ERR_LOG_MSG(PIN_ERR_LEVEL_DEBUG, "after PIN_FLD_USED_QUANTITY");

    PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG, "Notifiation input flist", notif_iflistp);
    PCM_OP(ctxp, MSO_OP_NTF_CREATE_NOTIFICATION, 0, notif_iflistp, &notif_oflistp, ebufp);
    PIN_ERR_LOG_FLIST(PIN_ERR_LEVEL_DEBUG, "Notification output flist", notif_oflistp);

    if (PIN_ERR_IS_ERR(ebufp)) 
    {
        PIN_ERR_LOG_EBUF(PIN_ERR_LEVEL_ERROR,
                         "pin_mta_worker_opcode error in notification ", ebufp);
    }else{
            PIN_ERR_LOG_FLIST (PIN_ERR_LEVEL_DEBUG, "pin_mta_worker_opcode output flist from main opcode", 
                           *op_out_flistpp);
    }
    return;
}


